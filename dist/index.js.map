{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable valid-typeof */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar T = 'number';\n\n\n// FUNCTIONS //\n\n/**\n* Wraps a function accepting complex number arguments to support providing both real and complex numbers.\n*\n* ## Notes\n*\n* -   The returned function **assumes** that the wrapped function accepts **only** complex number input arguments (i.e., every argument must be a complex number).\n* -   The returned function **assumes** that, if an input argument is non-numeric (i.e., not of type `number`), then the input argument is a complex number. The returned function does **not** verify that non-numeric input arguments are, in fact, complex number objects. The returned function passes non-numeric input arguments to the wrapped function without modification.\n*\n* @param {Function} fcn - function to wrap\n* @param {NonNegativeInteger} nargs - number of arguments\n* @param {Function} ctor - complex number constructor\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a constructor function\n* @returns {Function} wrapped function\n*\n* @example\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var caddf = require( '@stdlib/complex-float32-base-add' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n*\n* var f = wrap( caddf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\nfunction wrap( fcn, nargs, ctor ) {\n\tvar fcns;\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a function. Value: `%s`.', fcn ) );\n\t}\n\tif ( !isNonNegativeInteger( nargs ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', nargs ) );\n\t}\n\tif ( !isFunction( ctor ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a constructor function. Value: `%s`.', ctor ) );\n\t}\n\tfcns = [ fcn0, fcn1, fcn2, fcn3, fcn4, fcn5 ];\n\treturn ( nargs <= 5 ) ? fcns[ nargs ] : fcnN;\n\n\t/**\n\t* Invokes a nullary function.\n\t*\n\t* @private\n\t* @returns {*} result\n\t*/\n\tfunction fcn0() {\n\t\treturn fcn();\n\t}\n\n\t/**\n\t* Invokes a unary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn1( x ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\treturn fcn( x );\n\t}\n\n\t/**\n\t* Invokes a binary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn2( x, y ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\treturn fcn( x, y );\n\t}\n\n\t/**\n\t* Invokes a ternary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn3( x, y, z ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z );\n\t}\n\n\t/**\n\t* Invokes a quaternary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @param {(number|Complex)} w - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn4( x, y, z, w ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\tif ( typeof w === T ) {\n\t\t\tw = new ctor( w, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z, w );\n\t}\n\n\t/**\n\t* Invokes a quinary function accepting complex numbers.\n\t*\n\t* @private\n\t* @param {(number|Complex)} x - input value\n\t* @param {(number|Complex)} y - input value\n\t* @param {(number|Complex)} z - input value\n\t* @param {(number|Complex)} w - input value\n\t* @param {(number|Complex)} v - input value\n\t* @returns {*} result\n\t*/\n\tfunction fcn5( x, y, z, w, v ) {\n\t\tif ( typeof x === T ) {\n\t\t\tx = new ctor( x, 0.0 );\n\t\t}\n\t\tif ( typeof y === T ) {\n\t\t\ty = new ctor( y, 0.0 );\n\t\t}\n\t\tif ( typeof z === T ) {\n\t\t\tz = new ctor( z, 0.0 );\n\t\t}\n\t\tif ( typeof w === T ) {\n\t\t\tw = new ctor( w, 0.0 );\n\t\t}\n\t\tif ( typeof v === T ) {\n\t\t\tv = new ctor( v, 0.0 );\n\t\t}\n\t\treturn fcn( x, y, z, w, v );\n\t}\n\n\t/**\n\t* Invokes a function accepting an arbitrary number of complex number input arguments.\n\t*\n\t* @private\n\t* @param {...(number|Complex)} args - input values\n\t* @returns {*} result\n\t*/\n\tfunction fcnN() {\n\t\tvar args;\n\t\tvar v;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\tv = arguments[ i ];\n\t\t\tif ( typeof v === T ) {\n\t\t\t\tv = new ctor( v, 0.0 );\n\t\t\t}\n\t\t\targs.push( v );\n\t\t}\n\t\treturn fcn.apply( null, args );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = wrap;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wrap a function accepting complex number arguments to support providing both real and complex numbers.\n*\n* @module @stdlib/complex-base-wrap-function\n*\n* @example\n* var Complex64 = require( '@stdlib/complex-float32-ctor' );\n* var caddf = require( '@stdlib/complex-float32-base-add' );\n* var realf = require( '@stdlib/complex-float32-real' );\n* var imagf = require( '@stdlib/complex-float32-imag' );\n* var wrap = require( '@stdlib/complex-base-wrap-function' );\n*\n* var f = wrap( caddf, 2, Complex64 );\n*\n* // ...\n*\n* var z = f( 3.0, 4.0 );\n* // returns <Complex64>\n*\n* var re = realf( z );\n* // returns 7.0\n*\n* var im = imagf( z );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwBA,IAAIC,EAAa,QAAS,4BAA6B,EACnDC,EAAuB,QAAS,uCAAwC,EAAE,YAC1EC,EAAS,QAAS,uBAAwB,EAK1CC,EAAI,SAwCR,SAASC,EAAMC,EAAKC,EAAOC,EAAO,CACjC,IAAIC,EACJ,GAAK,CAACR,EAAYK,CAAI,EACrB,MAAM,IAAI,UAAWH,EAAQ,oEAAqEG,CAAI,CAAE,EAEzG,GAAK,CAACJ,EAAsBK,CAAM,EACjC,MAAM,IAAI,UAAWJ,EAAQ,gFAAiFI,CAAM,CAAE,EAEvH,GAAK,CAACN,EAAYO,CAAK,EACtB,MAAM,IAAI,UAAWL,EAAQ,gFAAiFK,CAAK,CAAE,EAEtH,OAAAC,EAAO,CAAEC,EAAMC,EAAMC,EAAMC,EAAMC,EAAMC,CAAK,EACnCR,GAAS,EAAME,EAAMF,CAAM,EAAIS,EAQxC,SAASN,GAAO,CACf,OAAOJ,EAAI,CACZ,CASA,SAASK,EAAMM,EAAI,CAClB,OAAK,OAAOA,IAAMb,IACjBa,EAAI,IAAIT,EAAMS,EAAG,CAAI,GAEfX,EAAKW,CAAE,CACf,CAUA,SAASL,EAAMK,EAAGC,EAAI,CACrB,OAAK,OAAOD,IAAMb,IACjBa,EAAI,IAAIT,EAAMS,EAAG,CAAI,GAEjB,OAAOC,IAAMd,IACjBc,EAAI,IAAIV,EAAMU,EAAG,CAAI,GAEfZ,EAAKW,EAAGC,CAAE,CAClB,CAWA,SAASL,EAAMI,EAAGC,EAAGC,EAAI,CACxB,OAAK,OAAOF,IAAMb,IACjBa,EAAI,IAAIT,EAAMS,EAAG,CAAI,GAEjB,OAAOC,IAAMd,IACjBc,EAAI,IAAIV,EAAMU,EAAG,CAAI,GAEjB,OAAOC,IAAMf,IACjBe,EAAI,IAAIX,EAAMW,EAAG,CAAI,GAEfb,EAAKW,EAAGC,EAAGC,CAAE,CACrB,CAYA,SAASL,EAAMG,EAAGC,EAAGC,EAAGC,EAAI,CAC3B,OAAK,OAAOH,IAAMb,IACjBa,EAAI,IAAIT,EAAMS,EAAG,CAAI,GAEjB,OAAOC,IAAMd,IACjBc,EAAI,IAAIV,EAAMU,EAAG,CAAI,GAEjB,OAAOC,IAAMf,IACjBe,EAAI,IAAIX,EAAMW,EAAG,CAAI,GAEjB,OAAOC,IAAMhB,IACjBgB,EAAI,IAAIZ,EAAMY,EAAG,CAAI,GAEfd,EAAKW,EAAGC,EAAGC,EAAGC,CAAE,CACxB,CAaA,SAASL,EAAME,EAAGC,EAAGC,EAAGC,EAAGC,EAAI,CAC9B,OAAK,OAAOJ,IAAMb,IACjBa,EAAI,IAAIT,EAAMS,EAAG,CAAI,GAEjB,OAAOC,IAAMd,IACjBc,EAAI,IAAIV,EAAMU,EAAG,CAAI,GAEjB,OAAOC,IAAMf,IACjBe,EAAI,IAAIX,EAAMW,EAAG,CAAI,GAEjB,OAAOC,IAAMhB,IACjBgB,EAAI,IAAIZ,EAAMY,EAAG,CAAI,GAEjB,OAAOC,IAAMjB,IACjBiB,EAAI,IAAIb,EAAMa,EAAG,CAAI,GAEff,EAAKW,EAAGC,EAAGC,EAAGC,EAAGC,CAAE,CAC3B,CASA,SAASL,GAAO,CACf,IAAIM,EACAD,EACA,EAGJ,IADAC,EAAO,CAAC,EACF,EAAI,EAAG,EAAI,UAAU,OAAQ,IAClCD,EAAI,UAAW,CAAE,EACZ,OAAOA,IAAMjB,IACjBiB,EAAI,IAAIb,EAAMa,EAAG,CAAI,GAEtBC,EAAK,KAAMD,CAAE,EAEd,OAAOf,EAAI,MAAO,KAAMgB,CAAK,CAC9B,CACD,CAKAtB,EAAO,QAAUK,ICxLjB,IAAIkB,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isFunction", "isNonNegativeInteger", "format", "T", "wrap", "fcn", "nargs", "ctor", "fcns", "fcn0", "fcn1", "fcn2", "fcn3", "fcn4", "fcn5", "fcnN", "x", "y", "z", "w", "v", "args", "main"]
}
